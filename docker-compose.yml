services:
  mysql:
    image: mysql:8.0
    container_name: mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      TZ: Asia/Seoul
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "mysqladmin ping -h localhost -u$MYSQL_USER -p$MYSQL_PASSWORD"]
      interval: 5s
      timeout: 3s
      retries: 5

  backend:
    image: dororo737/d-108:latest
    ports:
      - "8081:9987"
    volumes:
      - ./config:/app/config
    container_name: backend
    restart: unless-stopped
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/${MYSQL_DATABASE}?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC
      SPRING_DATASOURCE_USERNAME: ${MYSQL_USER}
      SPRING_DATASOURCE_PASSWORD: ${MYSQL_PASSWORD}
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_PROFILES_ACTIVE: prod
    networks:
      - app-network
    depends_on:
      mysql:
        condition: service_healthy

  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    container_name: phpmyadmin
    restart: always
    ports:
      - "8082:80"
    environment:
      PMA_HOST: mysql
      PMA_PORT: 3306
    depends_on:
      - mysql
    networks:
      - app-network

  # 여기서부터 Redis Stack 컨테이너 추가
  redis-stack:
    image: redis/redis-stack:latest  # 최신버전 Redis Stack 이미지
    container_name: redis-stack
    # 기본 Redis 포트는 6379, Redis Stack의 UI 포트는 8001(기본값)
    ports:
      - "8001:8001"  # Redis Stack 자체 Web UI (optional)

    environment:
      - REDIS_ARGS=--requirepass ${REDIS_PASSWORD}

    volumes:
      # redis-stack-data 라는 이름의 볼륨(또는 호스트 경로)을 생성하여 영구 저장
      - redis-stack-data:/data
    # 필요하다면 depends_on 등을 활용하여 의존성 설정 가능
    depends_on:
      - mysql
      - backend

    networks:
      - app-network

volumes:
  mysql_data:
  redis-stack-data:

networks:
  app-network:
    driver: bridge