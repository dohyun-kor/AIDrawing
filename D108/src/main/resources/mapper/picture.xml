<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.model.dao.PictureDao">

    <!-- 특정 사용자(userId)를 이용하여 마이룸 그림 전체 조회 -->
    <select id="getPicturesByUserId" parameterType="int" resultType="com.example.model.dto.PictureDto">
        SELECT
        p.picture_id AS pictureId,
        p.user_id AS userId,
        p.title,
        p.topic,
        p.description,
        p.image_url AS imageUrl,
        p.is_displayed AS isDisplayed
        FROM Picture p
        WHERE p.user_id = #{userId}
    </select>

    <!-- 마이룸에 있는 특정 그림 삭제-->
    <delete id="deletePictureById" parameterType="int">
        DELETE FROM Picture
        WHERE picture_id = #{pictureId}
    </delete>

    <!-- 전시 정보 업데이트 쿼리 (특정 그림 업데이트) -->
    <update id="updatePictureDisplay" parameterType="map">
        UPDATE Picture
        SET
        is_displayed = 1,                                         <!-- 그림이 전시됨을 표시 -->
        rotation = #{pictureDisplayRequestDto.rotation},          <!-- 회전 정보 업데이트 -->
        x_val = #{pictureDisplayRequestDto.xVal},                 <!-- x 좌표 업데이트 -->
        y_val = #{pictureDisplayRequestDto.yVal},                 <!-- y 좌표 업데이트 -->
        furniture = #{pictureDisplayRequestDto.furniture}         <!-- 액자 업데이트 -->
        WHERE user_id = #{userId}
        AND picture_id = #{pictureDisplayRequestDto.pictureId}          <!-- 그림 고유 아이디 조건 -->
    </update>

    <!-- 초기화 쿼리: 해당 유저의 모든 그림을 비게시(0)로 초기화 -->
    <update id="resetPictureDisplayForUser" parameterType="int">
        UPDATE Picture
        SET
        is_displayed = 0,    <!-- 모든 그림을 비게시 상태로 -->
        rotation = 0,        <!-- 회전 정보 초기화 (필요시) -->
        x_val = 0,           <!-- x 좌표 초기화 -->
        y_val = 0            <!-- y 좌표 초기화 -->
        WHERE user_id = #{userId}
    </update>

    <!-- 추가: 그림의 title, description 업데이트 쿼리 -->
    <update id="updatePictureInfo" parameterType="com.example.model.dto.PictureUpdateRequestDto">
        UPDATE Picture
        SET
        title = #{pictureUpdateRequestDto.title},
        description = #{pictureUpdateRequestDto.description}
        WHERE picture_id = #{pictureId}
    </update>

    <!-- 그림 업로드 시, Picture 테이블에 새 레코드 INSERT -->
    <insert id="insertNewPicture" parameterType="com.example.model.dto.PictureDto" useGeneratedKeys="true" keyProperty="pictureId">
        INSERT INTO Picture (
        user_id,
        image_url,
        topic,
        title,
        description,
        is_displayed,
        rotation,
        x_val,
        y_val,
        furniture,
        created_at
        ) VALUES (
        #{userId},
        #{imageUrl},
        #{topic},
        NULL,
        NULL,
        0,       -- 처음엔 전시 안된 상태
        0,
        0,
        0,
        0,
        NOW()
        )
    </insert>

</mapper>
